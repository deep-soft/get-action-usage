"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBar = void 0;
const cliprogress = require("cli-progress");
const datehelper_1 = require("./datehelper");
const github = require("./github");
class ProgressBar {
    constructor() {
        this.multiBar = new cliprogress.MultiBar({
            autopadding: true,
            barCompleteChar: '\u2588',
            barIncompleteChar: '\u2591',
            clearOnComplete: false,
            emptyOnZero: true,
            format: '{action}' +
                ' | {bar}' +
                ' | {percentage}% | {value}/{total} | {speed} {speed2}',
            hideCursor: true,
            noTTYOutput: github.isRunningOnGitHubRunner(),
            stopOnComplete: true,
        }, cliprogress.Presets.shades_grey);
        this.timeBar = this.multiBar.create(0, 0, {
            action: ProgressBar.getActionString(`check range ...`),
            total: 0,
            value: 0,
        });
        this.repoBar = this.multiBar.create(0, 0, {});
    }
    static getActionString(msg) {
        return msg.substring(0, 48).padEnd(55, ' ');
    }
    init(startDate, timeRangeDays) {
        const now = new Date();
        const totalTimeSegments = Math.ceil((now.getTime() - startDate.getTime()) / (timeRangeDays * 1000 * 3600 * 24));
        this.timeBar.start(totalTimeSegments, 1, {
            action: ProgressBar.getActionString(`checking range..`),
            speed: 'API',
            speed2: '',
            total: totalTimeSegments,
            value: 1,
        });
        this.repoBar.start(0, 0, {
            action: ProgressBar.getActionString('starting...'),
            repo: 'N/A',
            speed: 'N/A',
            speed2: '',
        });
    }
    update(startDate, nextDate, totalRepoCount, timeSegment) {
        this.repoBar.setTotal(totalRepoCount);
        this.repoBar.start(totalRepoCount, 0, {
            action: ProgressBar.getActionString('starting...'),
            speed: 'N/A',
            speed2: '',
        });
        this.timeBar.update(timeSegment, {
            action: ProgressBar.getActionString(`checking range.. ${datehelper_1.DateHelper.toTimeRangeString(startDate, nextDate)}`),
            value: timeSegment.toString().padStart(3, ' '),
        });
    }
    updateRepo(barCounter, payload) {
        this.repoBar.update(barCounter, payload);
    }
    updateApiQuota(restApi, searchApi) {
        if (restApi) {
            this.timeBar.update({
                speed: `API: REST:${restApi.toString()},`,
            });
        }
        if (searchApi) {
            this.timeBar.update({
                speed2: `Search:${searchApi.toString()}`,
            });
        }
    }
    stop() {
        this.repoBar.stop();
        this.timeBar.stop();
        this.multiBar.stop();
    }
}
exports.ProgressBar = ProgressBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHJvZ3Jlc3NiYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsNENBQTRDO0FBQzVDLDZDQUEwQztBQUMxQyxtQ0FBbUM7QUFFbkMsTUFBYSxXQUFXO0lBU3RCO1FBQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQ3RDO1lBQ0UsV0FBVyxFQUFFLElBQUk7WUFDakIsZUFBZSxFQUFFLFFBQVE7WUFDekIsaUJBQWlCLEVBQUUsUUFBUTtZQUMzQixlQUFlLEVBQUUsS0FBSztZQUN0QixXQUFXLEVBQUUsSUFBSTtZQUNqQixNQUFNLEVBQ0osVUFBVTtnQkFDVixVQUFVO2dCQUNWLHVEQUF1RDtZQUN6RCxVQUFVLEVBQUUsSUFBSTtZQUNoQixXQUFXLEVBQUUsTUFBTSxDQUFDLHVCQUF1QixFQUFFO1lBQzdDLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLEVBQ0QsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQ2hDLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7WUFDdEQsS0FBSyxFQUFFLENBQUM7WUFDUixLQUFLLEVBQUUsQ0FBQztTQUNULENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBaENNLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBVztRQUN2QyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQWdDTSxJQUFJLENBQUMsU0FBZSxFQUFFLGFBQXFCO1FBQ2hELE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFFdkIsTUFBTSxpQkFBaUIsR0FBVyxJQUFJLENBQUMsSUFBSSxDQUN6QyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUMzRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZDLE1BQU0sRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDO1lBQ3ZELEtBQUssRUFBRSxLQUFLO1lBQ1osTUFBTSxFQUFFLEVBQUU7WUFDVixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN2QixNQUFNLEVBQUUsV0FBVyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUM7WUFDbEQsSUFBSSxFQUFFLEtBQUs7WUFDWCxLQUFLLEVBQUUsS0FBSztZQUNaLE1BQU0sRUFBRSxFQUFFO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FDWCxTQUFlLEVBQ2YsUUFBYyxFQUNkLGNBQXNCLEVBQ3RCLFdBQW1CO1FBRW5CLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUU7WUFDcEMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDO1lBQ2xELEtBQUssRUFBRSxLQUFLO1lBQ1osTUFBTSxFQUFFLEVBQUU7U0FDWCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDL0IsTUFBTSxFQUFFLFdBQVcsQ0FBQyxlQUFlLENBQ2pDLG9CQUFvQix1QkFBVSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUN4RTtZQUNELEtBQUssRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7U0FDL0MsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLFVBQVUsQ0FBQyxVQUFrQixFQUFFLE9BQVk7UUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxjQUFjLENBQUMsT0FBZ0IsRUFBRSxTQUFrQjtRQUN4RCxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUNsQixLQUFLLEVBQUUsYUFBYSxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUc7YUFDMUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUNsQixNQUFNLEVBQUUsVUFBVSxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUU7YUFDekMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQWxHRCxrQ0FrR0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgwqkgMjAyMiBieSBMdWNhIENhcHBhIGxjYXBwYUBnbWFpbC5jb21cbi8vIEFsbCBjb250ZW50IG9mIHRoaXMgcmVwb3NpdG9yeSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQ0MgQlktU0EgTGljZW5zZS5cbi8vIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgKiBhcyBjbGlwcm9ncmVzcyBmcm9tICdjbGktcHJvZ3Jlc3MnO1xuaW1wb3J0IHsgRGF0ZUhlbHBlciB9IGZyb20gJy4vZGF0ZWhlbHBlcic7XG5pbXBvcnQgKiBhcyBnaXRodWIgZnJvbSAnLi9naXRodWInO1xuXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXIge1xuICBwdWJsaWMgc3RhdGljIGdldEFjdGlvblN0cmluZyhtc2c6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG1zZy5zdWJzdHJpbmcoMCwgNDgpLnBhZEVuZCg1NSwgJyAnKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgbXVsdGlCYXI6IGNsaXByb2dyZXNzLk11bHRpQmFyO1xuICBwcml2YXRlIHJlYWRvbmx5IHRpbWVCYXI6IGNsaXByb2dyZXNzLkJhcjtcbiAgcHJpdmF0ZSByZWFkb25seSByZXBvQmFyOiBjbGlwcm9ncmVzcy5CYXI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubXVsdGlCYXIgPSBuZXcgY2xpcHJvZ3Jlc3MuTXVsdGlCYXIoXG4gICAgICB7XG4gICAgICAgIGF1dG9wYWRkaW5nOiB0cnVlLFxuICAgICAgICBiYXJDb21wbGV0ZUNoYXI6ICdcXHUyNTg4JyxcbiAgICAgICAgYmFySW5jb21wbGV0ZUNoYXI6ICdcXHUyNTkxJyxcbiAgICAgICAgY2xlYXJPbkNvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgZW1wdHlPblplcm86IHRydWUsXG4gICAgICAgIGZvcm1hdDpcbiAgICAgICAgICAne2FjdGlvbn0nICtcbiAgICAgICAgICAnIHwge2Jhcn0nICtcbiAgICAgICAgICAnIHwge3BlcmNlbnRhZ2V9JSB8IHt2YWx1ZX0ve3RvdGFsfSB8IHtzcGVlZH0ge3NwZWVkMn0nLFxuICAgICAgICBoaWRlQ3Vyc29yOiB0cnVlLFxuICAgICAgICBub1RUWU91dHB1dDogZ2l0aHViLmlzUnVubmluZ09uR2l0SHViUnVubmVyKCksXG4gICAgICAgIHN0b3BPbkNvbXBsZXRlOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGNsaXByb2dyZXNzLlByZXNldHMuc2hhZGVzX2dyZXlcbiAgICApO1xuICAgIHRoaXMudGltZUJhciA9IHRoaXMubXVsdGlCYXIuY3JlYXRlKDAsIDAsIHtcbiAgICAgIGFjdGlvbjogUHJvZ3Jlc3NCYXIuZ2V0QWN0aW9uU3RyaW5nKGBjaGVjayByYW5nZSAuLi5gKSxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgdmFsdWU6IDAsXG4gICAgfSk7XG4gICAgdGhpcy5yZXBvQmFyID0gdGhpcy5tdWx0aUJhci5jcmVhdGUoMCwgMCwge30pO1xuICB9XG5cbiAgcHVibGljIGluaXQoc3RhcnREYXRlOiBEYXRlLCB0aW1lUmFuZ2VEYXlzOiBudW1iZXIpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIC8vIENvbXB1dGUgdGhlIHRvdGFsIHRpbWUtc2VnbWVudHMgb2YgJ3RpbWVSYW5nZScgZGF5cyBlYWNoLlxuICAgIGNvbnN0IHRvdGFsVGltZVNlZ21lbnRzOiBudW1iZXIgPSBNYXRoLmNlaWwoXG4gICAgICAobm93LmdldFRpbWUoKSAtIHN0YXJ0RGF0ZS5nZXRUaW1lKCkpIC8gKHRpbWVSYW5nZURheXMgKiAxMDAwICogMzYwMCAqIDI0KVxuICAgICk7XG4gICAgdGhpcy50aW1lQmFyLnN0YXJ0KHRvdGFsVGltZVNlZ21lbnRzLCAxLCB7XG4gICAgICBhY3Rpb246IFByb2dyZXNzQmFyLmdldEFjdGlvblN0cmluZyhgY2hlY2tpbmcgcmFuZ2UuLmApLFxuICAgICAgc3BlZWQ6ICdBUEknLFxuICAgICAgc3BlZWQyOiAnJyxcbiAgICAgIHRvdGFsOiB0b3RhbFRpbWVTZWdtZW50cyxcbiAgICAgIHZhbHVlOiAxLFxuICAgIH0pO1xuICAgIHRoaXMucmVwb0Jhci5zdGFydCgwLCAwLCB7XG4gICAgICBhY3Rpb246IFByb2dyZXNzQmFyLmdldEFjdGlvblN0cmluZygnc3RhcnRpbmcuLi4nKSxcbiAgICAgIHJlcG86ICdOL0EnLFxuICAgICAgc3BlZWQ6ICdOL0EnLFxuICAgICAgc3BlZWQyOiAnJyxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoXG4gICAgc3RhcnREYXRlOiBEYXRlLFxuICAgIG5leHREYXRlOiBEYXRlLFxuICAgIHRvdGFsUmVwb0NvdW50OiBudW1iZXIsXG4gICAgdGltZVNlZ21lbnQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9CYXIuc2V0VG90YWwodG90YWxSZXBvQ291bnQpO1xuICAgIHRoaXMucmVwb0Jhci5zdGFydCh0b3RhbFJlcG9Db3VudCwgMCwge1xuICAgICAgYWN0aW9uOiBQcm9ncmVzc0Jhci5nZXRBY3Rpb25TdHJpbmcoJ3N0YXJ0aW5nLi4uJyksXG4gICAgICBzcGVlZDogJ04vQScsXG4gICAgICBzcGVlZDI6ICcnLFxuICAgIH0pO1xuICAgIHRoaXMudGltZUJhci51cGRhdGUodGltZVNlZ21lbnQsIHtcbiAgICAgIGFjdGlvbjogUHJvZ3Jlc3NCYXIuZ2V0QWN0aW9uU3RyaW5nKFxuICAgICAgICBgY2hlY2tpbmcgcmFuZ2UuLiAke0RhdGVIZWxwZXIudG9UaW1lUmFuZ2VTdHJpbmcoc3RhcnREYXRlLCBuZXh0RGF0ZSl9YFxuICAgICAgKSxcbiAgICAgIHZhbHVlOiB0aW1lU2VnbWVudC50b1N0cmluZygpLnBhZFN0YXJ0KDMsICcgJyksXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlUmVwbyhiYXJDb3VudGVyOiBudW1iZXIsIHBheWxvYWQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMucmVwb0Jhci51cGRhdGUoYmFyQ291bnRlciwgcGF5bG9hZCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlQXBpUXVvdGEocmVzdEFwaT86IG51bWJlciwgc2VhcmNoQXBpPzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHJlc3RBcGkpIHtcbiAgICAgIHRoaXMudGltZUJhci51cGRhdGUoe1xuICAgICAgICBzcGVlZDogYEFQSTogUkVTVDoke3Jlc3RBcGkudG9TdHJpbmcoKX0sYCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VhcmNoQXBpKSB7XG4gICAgICB0aGlzLnRpbWVCYXIudXBkYXRlKHtcbiAgICAgICAgc3BlZWQyOiBgU2VhcmNoOiR7c2VhcmNoQXBpLnRvU3RyaW5nKCl9YCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xuICAgIHRoaXMucmVwb0Jhci5zdG9wKCk7XG4gICAgdGhpcy50aW1lQmFyLnN0b3AoKTtcbiAgICB0aGlzLm11bHRpQmFyLnN0b3AoKTtcbiAgfVxufVxuIl19